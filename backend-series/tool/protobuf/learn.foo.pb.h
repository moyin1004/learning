// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learn.foo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_learn_2efoo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_learn_2efoo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_learn_2efoo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_learn_2efoo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_learn_2efoo_2eproto;
namespace learn {
namespace foo {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Tint32;
class Tint32DefaultTypeInternal;
extern Tint32DefaultTypeInternal _Tint32_default_instance_;
}  // namespace foo
}  // namespace learn
PROTOBUF_NAMESPACE_OPEN
template<> ::learn::foo::Data* Arena::CreateMaybeMessage<::learn::foo::Data>(Arena*);
template<> ::learn::foo::Tint32* Arena::CreateMaybeMessage<::learn::foo::Tint32>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace learn {
namespace foo {

enum Type : int {
  APP = 0,
  WEB = 1,
  PC = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = APP;
constexpr Type Type_MAX = PC;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learn.foo.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  enum UrlCase {
    kHttp = 3,
    kHttps = 4,
    URL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learn.foo.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_learn_2efoo_2eproto);
    return ::descriptor_table_learn_2efoo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .learn.foo.Type type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::learn::foo::Type type() const;
  void set_type(::learn::foo::Type value);

  // string http = 3;
  private:
  bool has_http() const;
  public:
  void clear_http();
  static const int kHttpFieldNumber = 3;
  const std::string& http() const;
  void set_http(const std::string& value);
  void set_http(std::string&& value);
  void set_http(const char* value);
  void set_http(const char* value, size_t size);
  std::string* mutable_http();
  std::string* release_http();
  void set_allocated_http(std::string* http);

  // string https = 4;
  private:
  bool has_https() const;
  public:
  void clear_https();
  static const int kHttpsFieldNumber = 4;
  const std::string& https() const;
  void set_https(const std::string& value);
  void set_https(std::string&& value);
  void set_https(const char* value);
  void set_https(const char* value, size_t size);
  std::string* mutable_https();
  std::string* release_https();
  void set_allocated_https(std::string* https);

  void clear_url();
  UrlCase url_case() const;
  // @@protoc_insertion_point(class_scope:learn.foo.Data)
 private:
  class HasBitSetters;
  void set_has_http();
  void set_has_https();

  inline bool has_url() const;
  inline void clear_has_url();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int type_;
  union UrlUnion {
    UrlUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr https_;
  } url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_learn_2efoo_2eproto;
};
// -------------------------------------------------------------------

class Tint32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learn.foo.Tint32) */ {
 public:
  Tint32();
  virtual ~Tint32();

  Tint32(const Tint32& from);
  Tint32(Tint32&& from) noexcept
    : Tint32() {
    *this = ::std::move(from);
  }

  inline Tint32& operator=(const Tint32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tint32& operator=(Tint32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tint32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tint32* internal_default_instance() {
    return reinterpret_cast<const Tint32*>(
               &_Tint32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Tint32* other);
  friend void swap(Tint32& a, Tint32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tint32* New() const final {
    return CreateMaybeMessage<Tint32>(nullptr);
  }

  Tint32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tint32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tint32& from);
  void MergeFrom(const Tint32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tint32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learn.foo.Tint32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_learn_2efoo_2eproto);
    return ::descriptor_table_learn_2efoo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 n = 1;
  void clear_n();
  static const int kNFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learn.foo.Tint32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_learn_2efoo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// int32 id = 1;
inline void Data::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::id() const {
  // @@protoc_insertion_point(field_get:learn.foo.Data.id)
  return id_;
}
inline void Data::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:learn.foo.Data.id)
}

// uint32 version = 2;
inline void Data::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Data::version() const {
  // @@protoc_insertion_point(field_get:learn.foo.Data.version)
  return version_;
}
inline void Data::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:learn.foo.Data.version)
}

// string http = 3;
inline bool Data::has_http() const {
  return url_case() == kHttp;
}
inline void Data::set_has_http() {
  _oneof_case_[0] = kHttp;
}
inline void Data::clear_http() {
  if (has_http()) {
    url_.http_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
  }
}
inline const std::string& Data::http() const {
  // @@protoc_insertion_point(field_get:learn.foo.Data.http)
  if (has_http()) {
    return url_.http_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Data::set_http(const std::string& value) {
  // @@protoc_insertion_point(field_set:learn.foo.Data.http)
  if (!has_http()) {
    clear_url();
    set_has_http();
    url_.http_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.http_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learn.foo.Data.http)
}
inline void Data::set_http(std::string&& value) {
  // @@protoc_insertion_point(field_set:learn.foo.Data.http)
  if (!has_http()) {
    clear_url();
    set_has_http();
    url_.http_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.http_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learn.foo.Data.http)
}
inline void Data::set_http(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_http()) {
    clear_url();
    set_has_http();
    url_.http_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.http_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learn.foo.Data.http)
}
inline void Data::set_http(const char* value, size_t size) {
  if (!has_http()) {
    clear_url();
    set_has_http();
    url_.http_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.http_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learn.foo.Data.http)
}
inline std::string* Data::mutable_http() {
  if (!has_http()) {
    clear_url();
    set_has_http();
    url_.http_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:learn.foo.Data.http)
  return url_.http_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data::release_http() {
  // @@protoc_insertion_point(field_release:learn.foo.Data.http)
  if (has_http()) {
    clear_has_url();
    return url_.http_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Data::set_allocated_http(std::string* http) {
  if (has_url()) {
    clear_url();
  }
  if (http != nullptr) {
    set_has_http();
    url_.http_.UnsafeSetDefault(http);
  }
  // @@protoc_insertion_point(field_set_allocated:learn.foo.Data.http)
}

// string https = 4;
inline bool Data::has_https() const {
  return url_case() == kHttps;
}
inline void Data::set_has_https() {
  _oneof_case_[0] = kHttps;
}
inline void Data::clear_https() {
  if (has_https()) {
    url_.https_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
  }
}
inline const std::string& Data::https() const {
  // @@protoc_insertion_point(field_get:learn.foo.Data.https)
  if (has_https()) {
    return url_.https_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Data::set_https(const std::string& value) {
  // @@protoc_insertion_point(field_set:learn.foo.Data.https)
  if (!has_https()) {
    clear_url();
    set_has_https();
    url_.https_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.https_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learn.foo.Data.https)
}
inline void Data::set_https(std::string&& value) {
  // @@protoc_insertion_point(field_set:learn.foo.Data.https)
  if (!has_https()) {
    clear_url();
    set_has_https();
    url_.https_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.https_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learn.foo.Data.https)
}
inline void Data::set_https(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_https()) {
    clear_url();
    set_has_https();
    url_.https_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.https_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learn.foo.Data.https)
}
inline void Data::set_https(const char* value, size_t size) {
  if (!has_https()) {
    clear_url();
    set_has_https();
    url_.https_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  url_.https_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learn.foo.Data.https)
}
inline std::string* Data::mutable_https() {
  if (!has_https()) {
    clear_url();
    set_has_https();
    url_.https_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:learn.foo.Data.https)
  return url_.https_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data::release_https() {
  // @@protoc_insertion_point(field_release:learn.foo.Data.https)
  if (has_https()) {
    clear_has_url();
    return url_.https_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Data::set_allocated_https(std::string* https) {
  if (has_url()) {
    clear_url();
  }
  if (https != nullptr) {
    set_has_https();
    url_.https_.UnsafeSetDefault(https);
  }
  // @@protoc_insertion_point(field_set_allocated:learn.foo.Data.https)
}

// .learn.foo.Type type = 7;
inline void Data::clear_type() {
  type_ = 0;
}
inline ::learn::foo::Type Data::type() const {
  // @@protoc_insertion_point(field_get:learn.foo.Data.type)
  return static_cast< ::learn::foo::Type >(type_);
}
inline void Data::set_type(::learn::foo::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:learn.foo.Data.type)
}

inline bool Data::has_url() const {
  return url_case() != URL_NOT_SET;
}
inline void Data::clear_has_url() {
  _oneof_case_[0] = URL_NOT_SET;
}
inline Data::UrlCase Data::url_case() const {
  return Data::UrlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Tint32

// int32 n = 1;
inline void Tint32::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tint32::n() const {
  // @@protoc_insertion_point(field_get:learn.foo.Tint32.n)
  return n_;
}
inline void Tint32::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:learn.foo.Tint32.n)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace foo
}  // namespace learn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::learn::foo::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learn::foo::Type>() {
  return ::learn::foo::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_learn_2efoo_2eproto
